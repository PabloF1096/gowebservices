/*
 * Books, Authors and Publishers API
 *
 * This web service offers information on books, authors and publishers
 *
 * API version: 0.1.9
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"encoding/json"
	 "net/http"
	 "path"
	 "fmt"
)

var authors = []Author{
	Author{AuthorId: "Author1", Name: "Abraham Silberschatz", Nationality: "USA",
	Birth: "1985", Genre: "Male", BookIds: []string{"Book1","Book2"}},
	Author{AuthorId: "Author2", Name: "Andrew S. Tanenbaum", Nationality: "Ducth",
	Birth: "1944", Genre: "Male", BookIds: []string{"Book2"}},
}

func findAuthor(x string) int {
	for i, author := range authors {
		if x == author.AuthorId {
			return i
		}
	}
	return -1
}

func AuthorsAuthorsIdBooksGet(w http.ResponseWriter, r *http.Request) {
	dir := path.Dir(r.URL.Path)
	id := path.Base(dir)
	i := findAuthor(id)
	authorRef := &authors[i]
	var authorBooks []Book
	for i := 0; i < len(authorRef.BookIds); i++ {
		fmt.Println(authorRef.BookIds[i])
		indexBook := findBook(authorRef.BookIds[i])
		authorBooks = append(authorBooks, books[indexBook])
	}
	dataJson, _ := json.Marshal(authorBooks)
		w.Header().Set("Content-Type", "application/json; charset=UTF-8")
		w.Write(dataJson)
		w.WriteHeader(http.StatusOK)
}

func AuthorsAuthorIdDelete(w http.ResponseWriter, r *http.Request) {
	id := path.Base(r.URL.Path)
	i := findAuthor(id)
	authors = append(authors[:i], authors[i+1:]...)
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func AuthorsAuthorIdGet(w http.ResponseWriter, r *http.Request) {
	id := path.Base(r.URL.Path)
	i := findAuthor(id)
	if i == -1 {
	 return
	}
	dataJson, _ := json.Marshal(authors[i])
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.Write(dataJson)
	w.WriteHeader(http.StatusOK)
}

func AuthorsAuthorIdPut(w http.ResponseWriter, r *http.Request) {
	id := path.Base(r.URL.Path)
	i := findAuthor(id)
	authorRef := &authors[i]

	len := r.ContentLength
    body := make([]byte, len)
    r.Body.Read(body)
    author := Author{}
	json.Unmarshal(body, &author)

	authorRef.Name = isValidUpdate(authorRef.Name, author.Name)
	authorRef.Nationality = isValidUpdate(authorRef.Nationality, author.Nationality)
	authorRef.Birth = isValidUpdate(authorRef.Birth, author.Birth)
	authorRef.Genre = isValidUpdate(authorRef.Genre, author.Genre)
	authorRef.BookIds = isValidUpdateBookIds(authorRef.BookIds, author.BookIds)


	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func AuthorsPost(w http.ResponseWriter, r *http.Request) {
	var author Author
	 err := json.NewDecoder(r.Body).Decode(&author)
	 if err != nil {
		 http.Error(w, err.Error(), http.StatusBadRequest)
		 return
	 }
	 authors = append(authors, author)
	 w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	 w.WriteHeader(http.StatusOK)
}

func isValidUpdate(current string, new string) string {
	if new != "" {
		return new
	}

	return current
}
func isValidUpdateBookIds(current []string, new []string) []string {
	if len(new) > 0 {
		return new
	}

	return current
}
