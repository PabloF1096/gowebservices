/*
 * Books, Authors and Publishers API
 *
 * This web service offers information on books, authors and publishers
 *
 * API version: 0.1.9
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"encoding/json"
	 "net/http"
	 "path"
	 "fmt"
)

var books = []Book{
    Book{BookId: "Book1", Title: "Operating System Concepts", Edition: "9th",
        Copyright: "2012", Language: "ENGLISH", Pages: "976",
        AuthorsIds: []string{"Author1","Author2"}, PublishersIds: []string{"Publisher1","Publisher2"}},
    Book{BookId: "Book2", Title: "Computer Networks", Edition: "5th",
        Copyright: "2010", Language: "ENGLISH", Pages: "960",
        AuthorsIds: []string{"Author2"}, PublishersIds: []string{"Publisher2"}},
}

func findBook(x string) int {
	for i, book := range books {
		if x == book.BookId {
			return i
		}
	}
	return -1
}

func BooksBookIdAuthorsGet(w http.ResponseWriter, r *http.Request) {
	dir := path.Dir(r.URL.Path)
	id := path.Base(dir)
	i := findBook(id)
	bookRef := &books[i]
	var bookAuthors []Author
	for i := 0; i < len(bookRef.AuthorsIds); i++ {
		fmt.Println(bookRef.AuthorsIds[i])
		authorIndex := findAuthor(bookRef.AuthorsIds[i])
		bookAuthors = append(bookAuthors, authors[authorIndex])
	}
	dataJson, _ := json.Marshal(bookAuthors)
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.Write(dataJson)
	w.WriteHeader(http.StatusOK)
}

func BooksBookIdPublishersGet(w http.ResponseWriter, r *http.Request) {
	dir := path.Dir(r.URL.Path)
	id := path.Base(dir)
	i := findBook(id)
	bookRef := &books[i]
	var bookPublishers []Publisher
	for i := 0; i < len(bookRef.PublishersIds); i++ {
		fmt.Println(bookRef.PublishersIds[i])
		publisherIndex := findPublisher(bookRef.PublishersIds[i])
		bookPublishers = append(bookPublishers, publishers[publisherIndex])
	}
	dataJson, _ := json.Marshal(bookPublishers)
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.Write(dataJson)
	w.WriteHeader(http.StatusOK)
}

func BooksBookIdDelete(w http.ResponseWriter, r *http.Request) {
	id := path.Base(r.URL.Path)
	i := findBook(id)
	books = append(books[:i], books[i+1:]...)
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func BooksBookIdGet(w http.ResponseWriter, r *http.Request) {
	id := path.Base(r.URL.Path)
	i := findBook(id)
	if i == -1 {
	 return
	}
	dataJson, _ := json.Marshal(books[i])
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.Write(dataJson)
	w.WriteHeader(http.StatusOK)
}

func BooksBookIdPut(w http.ResponseWriter, r *http.Request) {
	id := path.Base(r.URL.Path)
	i := findBook(id)
	bookRef := &books[i]

	len := r.ContentLength
    body := make([]byte, len)
    r.Body.Read(body)
    book := Book{}
	json.Unmarshal(body, &book)

	bookRef.Title = isValidUpdate(bookRef.Title, book.Title)
	bookRef.Edition = isValidUpdate(bookRef.Edition, book.Edition)
	bookRef.Copyright = isValidUpdate(bookRef.Copyright, book.Copyright)
	bookRef.Language = isValidUpdate(bookRef.Language, book.Language)
	bookRef.Pages = isValidUpdate(bookRef.Pages, book.Pages)
	bookRef.AuthorsIds = isValidUpdateBookIds(bookRef.AuthorsIds, book.AuthorsIds)
	bookRef.PublishersIds = isValidUpdateBookIds(bookRef.PublishersIds, book.PublishersIds)


	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func BooksPost(w http.ResponseWriter, r *http.Request) {
	var book Book
	 err := json.NewDecoder(r.Body).Decode(&book)
	 if err != nil {
		 http.Error(w, err.Error(), http.StatusBadRequest)
		 return
	 }
	 books = append(books, book)
	 w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	 w.WriteHeader(http.StatusOK)
}
