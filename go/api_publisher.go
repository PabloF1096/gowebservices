/*
 * Books, Authors and Publishers API
 *
 * This web service offers information on books, authors and publishers
 *
 * API version: 0.1.9
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"encoding/json"
	 "net/http"
	 "path"
	 "fmt"
)

var publishers = []Publisher{
	Publisher{PublisherId: "Publisher1", Name: "John Wiley & Sons", Country: "USA",
	Founded: "1807", Genre: "Engineering", BookIds: []string{"Book1","Book2"}},
	Publisher{PublisherId: "Publisher2", Name: "Pearson Education", Country: "UK",
	Founded: "1844", Genre: "DataBases", BookIds: []string{"Book2"}},
}

func findPublisher(x string) int {
	for i, publisher := range publishers {
		if x == publisher.PublisherId {
			return i
		}
	}
	return -1
}

func PublisherPublisherIdBooksGet(w http.ResponseWriter, r *http.Request) {
	dir := path.Dir(r.URL.Path)
	id := path.Base(dir)
	i := findPublisher(id)
	publisherRef := &publishers[i]
	var publisherBooks []Book
	for i := 0; i < len(publisherRef.BookIds); i++ {
		fmt.Println(publisherRef.BookIds[i])
		indexBook := findBook(publisherRef.BookIds[i])
		publisherBooks = append(publisherBooks, books[indexBook])
	}
	dataJson, _ := json.Marshal(publisherBooks)
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.Write(dataJson)
	w.WriteHeader(http.StatusOK)
}

func PublisherPublisherIdDelete(w http.ResponseWriter, r *http.Request) {
	id := path.Base(r.URL.Path)
	i := findPublisher(id)
	publishers = append(publishers[:i], publishers[i+1:]...)
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func PublisherPublisherIdGet(w http.ResponseWriter, r *http.Request) {
	id := path.Base(r.URL.Path)
	i := findPublisher(id)
	if i == -1 {
	 return
	}
	dataJson, _ := json.Marshal(publishers[i])
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.Write(dataJson)
	w.WriteHeader(http.StatusOK)
}

func PublisherPublisherIdPut(w http.ResponseWriter, r *http.Request) {
	id := path.Base(r.URL.Path)
	i := findPublisher(id)
	publisherRef := &publishers[i]

	len := r.ContentLength
    body := make([]byte, len)
    r.Body.Read(body)
    publisher := Publisher{}
	json.Unmarshal(body, &publisher)

	publisherRef.Name = isValidUpdate(publisherRef.Name, publisher.Name)
	publisherRef.Country = isValidUpdate(publisherRef.Country, publisher.Country)
	publisherRef.Founded = isValidUpdate(publisherRef.Founded, publisher.Founded)
	publisherRef.Genre = isValidUpdate(publisherRef.Genre, publisher.Genre)
	publisherRef.BookIds = isValidUpdateBookIds(publisherRef.BookIds, publisher.BookIds)


	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func PublishersPost(w http.ResponseWriter, r *http.Request) {
	var publisher Publisher
	 err := json.NewDecoder(r.Body).Decode(&publisher)
	 if err != nil {
		 http.Error(w, err.Error(), http.StatusBadRequest)
		 return
	 }
	 publishers = append(publishers, publisher)
	 w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	 w.WriteHeader(http.StatusOK)
}
